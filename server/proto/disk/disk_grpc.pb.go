// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package disk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AreaManagerClient is the client API for AreaManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AreaManagerClient interface {
	Create(ctx context.Context, in *CreateAreaRequest, opts ...grpc.CallOption) (*CreateAreaResponse, error)
	ListUsers(ctx context.Context, in *ListAreaUsersRequest, opts ...grpc.CallOption) (*ListAreaUsersResponse, error)
	HasUser(ctx context.Context, in *HasUserRequest, opts ...grpc.CallOption) (*HasUserResponse, error)
}

type areaManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAreaManagerClient(cc grpc.ClientConnInterface) AreaManagerClient {
	return &areaManagerClient{cc}
}

func (c *areaManagerClient) Create(ctx context.Context, in *CreateAreaRequest, opts ...grpc.CallOption) (*CreateAreaResponse, error) {
	out := new(CreateAreaResponse)
	err := c.cc.Invoke(ctx, "/disk.AreaManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaManagerClient) ListUsers(ctx context.Context, in *ListAreaUsersRequest, opts ...grpc.CallOption) (*ListAreaUsersResponse, error) {
	out := new(ListAreaUsersResponse)
	err := c.cc.Invoke(ctx, "/disk.AreaManager/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaManagerClient) HasUser(ctx context.Context, in *HasUserRequest, opts ...grpc.CallOption) (*HasUserResponse, error) {
	out := new(HasUserResponse)
	err := c.cc.Invoke(ctx, "/disk.AreaManager/HasUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AreaManagerServer is the server API for AreaManager service.
// All implementations must embed UnimplementedAreaManagerServer
// for forward compatibility
type AreaManagerServer interface {
	Create(context.Context, *CreateAreaRequest) (*CreateAreaResponse, error)
	ListUsers(context.Context, *ListAreaUsersRequest) (*ListAreaUsersResponse, error)
	HasUser(context.Context, *HasUserRequest) (*HasUserResponse, error)
	mustEmbedUnimplementedAreaManagerServer()
}

// UnimplementedAreaManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAreaManagerServer struct {
}

func (UnimplementedAreaManagerServer) Create(context.Context, *CreateAreaRequest) (*CreateAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAreaManagerServer) ListUsers(context.Context, *ListAreaUsersRequest) (*ListAreaUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedAreaManagerServer) HasUser(context.Context, *HasUserRequest) (*HasUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUser not implemented")
}
func (UnimplementedAreaManagerServer) mustEmbedUnimplementedAreaManagerServer() {}

// UnsafeAreaManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AreaManagerServer will
// result in compilation errors.
type UnsafeAreaManagerServer interface {
	mustEmbedUnimplementedAreaManagerServer()
}

func RegisterAreaManagerServer(s *grpc.Server, srv AreaManagerServer) {
	s.RegisterService(&_AreaManager_serviceDesc, srv)
}

func _AreaManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.AreaManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaManagerServer).Create(ctx, req.(*CreateAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaManager_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAreaUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaManagerServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.AreaManager/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaManagerServer).ListUsers(ctx, req.(*ListAreaUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaManager_HasUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaManagerServer).HasUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.AreaManager/HasUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaManagerServer).HasUser(ctx, req.(*HasUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AreaManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "disk.AreaManager",
	HandlerType: (*AreaManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AreaManager_Create_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _AreaManager_ListUsers_Handler,
		},
		{
			MethodName: "HasUser",
			Handler:    _AreaManager_HasUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disk.proto",
}

// UserManagerClient is the client API for UserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerClient interface {
	Add(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	Write(ctx context.Context, in *WriteUserRequest, opts ...grpc.CallOption) (*WriteUserResponse, error)
	Read(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserResponse, error)
}

type userManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerClient(cc grpc.ClientConnInterface) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) Add(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/disk.UserManager/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) Write(ctx context.Context, in *WriteUserRequest, opts ...grpc.CallOption) (*WriteUserResponse, error) {
	out := new(WriteUserResponse)
	err := c.cc.Invoke(ctx, "/disk.UserManager/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) Read(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserResponse, error) {
	out := new(ReadUserResponse)
	err := c.cc.Invoke(ctx, "/disk.UserManager/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServer is the server API for UserManager service.
// All implementations must embed UnimplementedUserManagerServer
// for forward compatibility
type UserManagerServer interface {
	Add(context.Context, *AddUserRequest) (*AddUserResponse, error)
	Write(context.Context, *WriteUserRequest) (*WriteUserResponse, error)
	Read(context.Context, *ReadUserRequest) (*ReadUserResponse, error)
	mustEmbedUnimplementedUserManagerServer()
}

// UnimplementedUserManagerServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagerServer struct {
}

func (UnimplementedUserManagerServer) Add(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedUserManagerServer) Write(context.Context, *WriteUserRequest) (*WriteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedUserManagerServer) Read(context.Context, *ReadUserRequest) (*ReadUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedUserManagerServer) mustEmbedUnimplementedUserManagerServer() {}

// UnsafeUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServer will
// result in compilation errors.
type UnsafeUserManagerServer interface {
	mustEmbedUnimplementedUserManagerServer()
}

func RegisterUserManagerServer(s *grpc.Server, srv UserManagerServer) {
	s.RegisterService(&_UserManager_serviceDesc, srv)
}

func _UserManager_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.UserManager/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Add(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.UserManager/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Write(ctx, req.(*WriteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.UserManager/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Read(ctx, req.(*ReadUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "disk.UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _UserManager_Add_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _UserManager_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _UserManager_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disk.proto",
}

// CursorManagerClient is the client API for CursorManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CursorManagerClient interface {
	Write(ctx context.Context, in *WriteCursorRequest, opts ...grpc.CallOption) (*WriteCursorResponse, error)
	Read(ctx context.Context, in *ReadCursorRequest, opts ...grpc.CallOption) (*ReadCursorResponse, error)
}

type cursorManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCursorManagerClient(cc grpc.ClientConnInterface) CursorManagerClient {
	return &cursorManagerClient{cc}
}

func (c *cursorManagerClient) Write(ctx context.Context, in *WriteCursorRequest, opts ...grpc.CallOption) (*WriteCursorResponse, error) {
	out := new(WriteCursorResponse)
	err := c.cc.Invoke(ctx, "/disk.CursorManager/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cursorManagerClient) Read(ctx context.Context, in *ReadCursorRequest, opts ...grpc.CallOption) (*ReadCursorResponse, error) {
	out := new(ReadCursorResponse)
	err := c.cc.Invoke(ctx, "/disk.CursorManager/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CursorManagerServer is the server API for CursorManager service.
// All implementations must embed UnimplementedCursorManagerServer
// for forward compatibility
type CursorManagerServer interface {
	Write(context.Context, *WriteCursorRequest) (*WriteCursorResponse, error)
	Read(context.Context, *ReadCursorRequest) (*ReadCursorResponse, error)
	mustEmbedUnimplementedCursorManagerServer()
}

// UnimplementedCursorManagerServer must be embedded to have forward compatible implementations.
type UnimplementedCursorManagerServer struct {
}

func (UnimplementedCursorManagerServer) Write(context.Context, *WriteCursorRequest) (*WriteCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedCursorManagerServer) Read(context.Context, *ReadCursorRequest) (*ReadCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedCursorManagerServer) mustEmbedUnimplementedCursorManagerServer() {}

// UnsafeCursorManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CursorManagerServer will
// result in compilation errors.
type UnsafeCursorManagerServer interface {
	mustEmbedUnimplementedCursorManagerServer()
}

func RegisterCursorManagerServer(s *grpc.Server, srv CursorManagerServer) {
	s.RegisterService(&_CursorManager_serviceDesc, srv)
}

func _CursorManager_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CursorManagerServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.CursorManager/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CursorManagerServer).Write(ctx, req.(*WriteCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CursorManager_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CursorManagerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disk.CursorManager/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CursorManagerServer).Read(ctx, req.(*ReadCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CursorManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "disk.CursorManager",
	HandlerType: (*CursorManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _CursorManager_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _CursorManager_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disk.proto",
}
